- name: List PM2 processes
  shell: pm2 list
  register: pm2_list
  changed_when: false
  tags: network_verify

- name: Display PM2 process status
  debug:
    msg: "{{ pm2_list.stdout }}"
  tags: network_verify

- name: Check for running validator processes
  shell: pm2 list | grep -c "TV[0-9]" || echo "0"
  register: validator_count
  changed_when: false
  tags: network_verify

- name: Check for running miner processes
  shell: pm2 list | grep -c "TM[0-9]" || echo "0"
  register: miner_count
  changed_when: false
  tags: network_verify

- name: Display running process counts
  debug:
    msg: 
      - "Validators running: {{ validator_count.stdout }}"
      - "Miners running: {{ miner_count.stdout }}"
  tags: network_verify

- name: Check Subtensor RPC connectivity
  shell: "curl -s -H 'Content-Type: application/json' -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"system_health\", \"params\":[]}' http://127.0.0.1:9944 | grep -q result"
  register: rpc_check
  failed_when: false
  changed_when: false
  tags: network_verify

- name: Display Subtensor RPC status
  debug:
    msg: "Subtensor RPC connectivity: {{ 'OK' if rpc_check.rc == 0 else 'FAILED' }}"
  tags: network_verify

- name: Check Subtensor CLI connectivity
  shell: btcli subnet list --subtensor.network {{ network }}
  register: cli_check
  failed_when: false
  changed_when: false
  timeout: 10
  tags: network_verify

- name: Display Subtensor CLI status
  debug:
    msg: "Subtensor CLI connectivity: {{ 'OK' if cli_check.rc == 0 else 'FAILED' }}"
  tags: network_verify

- name: Check subnet metagraph
  shell: btcli s metagraph --netuid {{ netuid }} --network {{ network }}
  register: subnet_metagraph
  failed_when: false
  changed_when: false
  when: cli_check.rc == 0
  tags: network_verify

- name: Set subnet_exists variable
  set_fact:
    subnet_exists: "{{ 'Subnet ' ~ netuid ~ ' does not exist' not in subnet_metagraph.stdout and 'Subnet ' ~ netuid ~ ' does not exist' not in subnet_metagraph.stderr }}"
  when: cli_check.rc == 0
  tags: network_verify
  
- name: Debug subnet existence
  debug:
    msg: "Subnet {{ netuid }} exists: {{ subnet_exists | default(false) }}"
  tags: network_verify

- name: Display subnet metagraph
  debug:
    msg: "{{ subnet_metagraph.stdout_lines | default(['No metagraph information available']) }}"
  when: cli_check.rc == 0 and subnet_exists | default(false)
  tags: network_verify

- name: Set validator coldkey paths if not defined
  set_fact:
    validator_coldkey_paths: "{{ validator_hotkeys | map('regex_replace', '^(.*)$', cold_wallet_name + '_\\1') | list }}"
  when: validator_coldkey_paths is not defined
  tags: network_verify

- name: Check validator registration and stake status
  shell: btcli wallet overview --wallet.name "{{ item }}" --subtensor.network {{ network }}
  loop: "{{ validator_coldkey_paths }}"
  register: validator_overview
  failed_when: false
  changed_when: false
  when: cli_check.rc == 0 and subnet_exists | default(false)
  tags: network_verify
  args:
    executable: /bin/bash

- name: Display validator overview
  debug:
    msg: "Overview for {{ item.item }}: {{ (item.stdout_lines | join(' ')) | regex_replace('\\n', ' ') | truncate(100) }}"
  loop: "{{ validator_overview.results | default([]) }}"
  when: cli_check.rc == 0 and subnet_exists | default(false) and item.stdout is defined
  tags: network_verify

- name: Verify network setup is complete
  debug:
    msg: >
      {% set success = subnet_exists | default(false) and 
                      validator_count.stdout | int >= 1 and 
                      miner_count.stdout | int >= 1 and 
                      cli_check.rc == 0 and 
                      rpc_check.rc == 0 %}
      Network verification {{ 'SUCCESSFUL' if success else 'FAILED' }}
  tags: network_verify

